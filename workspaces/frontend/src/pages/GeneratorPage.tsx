// workspaces/frontend/src/pages/GeneratorPage.tsx
import React, { useState, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/components/Toast';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { processManualTextInput } from '@/services/aiService';
import clsx from 'clsx';
import { storage } from '@/firebase';
import { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';
import type { ProcessManualTextInputCallableData } from '@pediaquiz/types'; // FIX: Explicitly import the type

const GeneratorPage: React.FC = () => {
  const { user } = useAuth();
  const { addToast } = useToast();
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  const [title, setTitle] = useState('');
  const [pastedText, setPastedText] = useState('');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);

  const processContentMutation = useMutation<
    { success: boolean, uploadId: string, message: string }, // Explicit return type to match expected backend change
    Error, // Error type
    // FIX: Combined inputs for mutationFn, better type consistency
    { title: string, rawText?: string, file?: File, isMarrow: boolean } 
  >({
        mutationFn: async (vars) => {
            if (!user?.uid) throw new Error("User not authenticated.");

            if (vars.file) {
                const storageRef = ref(storage, `uploads/${user.uid}/GENERAL_PDF_${Date.now()}_${vars.file.name}`);
                const uploadTask = uploadBytesResumable(storageRef, vars.file);

                return new Promise<{ success: boolean, uploadId: string, message: string }>((resolve, reject) => { // FIX: Explicit return type
                    uploadTask.on('state_changed',
                        (snapshot) => {
                            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                            setUploadProgress(progress);
                        },
                        (error) => {
                            reject(error);
                        },
                        () => {
                            // OnFinalize Cloud Function will process the file, frontend just needs to know upload succeeded
                            // Pass a dummy uploadId as the actual one is generated by the CF trigger
                            resolve({ success: true, uploadId: 'file-upload-handled-by-trigger', message: "File uploaded! Processing will begin in the background." });
                        }
                    );
                });
            } else if (vars.rawText) {
                // FIX: Ensure correct type is passed to processManualTextInput
                const dataToPass: ProcessManualTextInputCallableData = { 
                    fileName: vars.title, 
                    rawText: vars.rawText, 
                    isMarrow: vars.isMarrow 
                };
                return await processManualTextInput(dataToPass);
            }
            throw new Error("No source text or file provided.");
        },
        onSuccess: (data) => { // FIX: Data structure includes message
            addToast(data.message, "success");
            queryClient.invalidateQueries({ queryKey: ['generationJobs'] });
            navigate('/admin/review');
        },
        onError: (error: Error) => {
            addToast(`Error: ${error.message}`, "danger");
        },
        onSettled: () => {
            setIsUploading(false);
        }
    });

  const handleProcessContent = () => {
        if (!user) {
            addToast('Please log in to generate content.', 'warning');
            return;
        }
        if (!title.trim()) {
            addToast('Please provide a title for the content.', 'warning');
            return;
        }

        if (selectedFile) {
            setIsUploading(true);
            processContentMutation.mutate({ title: title.trim(), file: selectedFile, isMarrow: false });
        } else if (pastedText.trim()) {
            processContentMutation.mutate({ title: title.trim(), rawText: pastedText.trim(), isMarrow: false });
        } else {
            addToast('Please paste some text or select a PDF/Text file.', 'warning');
        }
    };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      if (file.type !== "application/pdf" && !file.type.startsWith("text/")) {
        addToast("Please select a PDF or a plain text file.", "warning");
        setSelectedFile(null);
        if (fileInputRef.current) fileInputRef.current.value = '';
        return;
      }
      setSelectedFile(file);
      setTitle(file.name.replace(/\.pdf$|\.txt$/, ''));
      setPastedText('');
    } else {
      setSelectedFile(null);
    }
  };

  const isProcessing = processContentMutation.isPending || isUploading;

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Content Generator</h1>
      <p className="text-slate-500 dark:text-slate-400">
        Upload your study materials. They will appear in the{" "}
        <Link to="/admin/review" className="text-sky-500 hover:underline">
          Review Queue
        </Link>{" "}
        for planning, generation, and approval.
      </p>

      <div className="card-base p-6 space-y-4">
        <h2 className="text-xl font-bold mb-4">Submit New Content</h2>
        <div className="mb-4">
            <label htmlFor="title" className="block text-sm font-medium mb-1">Content Title:</label>
            <input
                id="title"
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="e.g., Cardiology - Heart Failure Chapter"
                className="input-field"
                disabled={isProcessing}
            />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <label htmlFor="pastedText" className="block text-sm font-medium mb-1">Paste Text:</label>
                <textarea
                    id="pastedText"
                    value={pastedText}
                    onChange={(e) => { setPastedText(e.target.value); setSelectedFile(null); if (fileInputRef.current) fileInputRef.current.value = ''; }}
                    placeholder="Paste raw text here..."
                    className="w-full h-40 p-3 border rounded-md dark:bg-slate-700 dark:border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                    disabled={isProcessing || !!selectedFile}
                 />
            </div>
            <div className="flex flex-col">
                <label htmlFor="pdfUpload" className="block text-sm font-medium mb-1">Or Upload PDF/Text File:</label>
                <input
                    id="pdfUpload"
                    type="file"
                    accept=".pdf, .txt"
                    onChange={handleFileChange}
                    ref={fileInputRef}
                    className="block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-sky-50 file:text-sky-700 hover:file:bg-sky-100 disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled={isProcessing || pastedText.trim() !== ''}
                />
                {selectedFile && <p className="text-sm text-slate-600 mt-2">Selected: {selectedFile.name}</p>}
                {isUploading && (
                    <div className="mt-4">
                        <div className="w-full bg-neutral-200 rounded-full h-2.5 dark:bg-neutral-700">
                            <div className="bg-success-600 h-2.5 rounded-full" style={{ width: `${uploadProgress}%` }}></div>
                        </div>
                        <p className="mt-2 text-sm text-center text-success-500 animate-pulse">
                            Uploading... {uploadProgress.toFixed(0)}%
                        </p>
                    </div>
                )}
            </div>
        </div>
       
        <button
            onClick={handleProcessContent}
            disabled={isProcessing || !title.trim() || (!pastedText.trim() && !selectedFile)}
            className={clsx(
                "mt-4 w-full btn-primary",
            )}
        >
            {isProcessing ? 'Processing...' : 'Submit Content'}
        </button>
      </div>
    </div>
  );
};

export default GeneratorPage;